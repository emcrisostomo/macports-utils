#!/usr/bin/env zsh
# -*- vim:fenc=utf-8:et:sw=2:ts=2:sts=2
#
# Copyright (c) 2018 Enrico M. Crisostomo
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#  * Neither the name of the <organization> nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
setopt local_options
setopt local_traps
unsetopt glob_subst
unsetopt bash_rematch

set -o errexit
set -o nounset
set -o pipefail

PROGNAME=${0:t}
PROGDIR=${0:h}
BUG_REPORT=@PACKAGE_BUGREPORT@
PACKAGE_VERSION=@PACKAGE_VERSION@
TEMPLATES_DIR=@pkgdatadir@/templates
typeset -r GITHUB_RELEASE_TARBALL_REGEX=https://github.com/([^/]+)/([^/]+)/releases/download/([^/]+)/([^/]+)
typeset -r GITHUB_PROJECT_REGEX="https://github.com/([^/]+)/([^/]+)/?"
typeset -r PYHOSTED_REGEX=https://files.pythonhosted.org/packages/source/([^/])/([^/]+)/([^/]+)
typeset -i ARGS_PROCESSED=0
typeset -i USE_CACHED_FILES=1
typeset -a help_flag
typeset -a no_cache_flag
typeset -a url_flag
typeset -a verbose_flag
typeset -a version_flag
VERBOSE_PRINT=:
REQUIRED_PROGS=( curl jq openssl )
typeset -a git_repos_dir
DISTFILE_URL=

for p in ${REQUIRED_PROGS}
do
  command -v ${p} > /dev/null 2>&1 ||
    {
      >&2 print -- Cannot find required program: ${p}
      exit 1
    }
done

print_version()
{
  print -- "${PROGNAME} ${PACKAGE_VERSION}"
  print -- "Copyright (C) 2018 Enrico M. Crisostomo"
  print -- "License: BSD-3-Clause <https://opensource.org/licenses/BSD-3-Clause/>."
  print -- "This is free software: you are free to change and redistribute it."
  print -- "There is NO WARRANTY, to the extent permitted by law."
  print
  print -- "Written by Enrico M. Crisostomo"
}

print_usage()
{
  print -- "${PROGNAME} ${PACKAGE_VERSION}"
  print
  print -- "Usage:"
  print -- "${PROGNAME} (options)* (path)*"
  print -- "${PROGNAME} -h"
  print -- "${PROGNAME} -v"
  print
  print -- "Options:"
  print -- " -h, --help     Print this message."
  print -- "     --no-cache Always download the distfile."
  print -- " -u, --url      Use the specified url."
  print -- " -v, --verbose  Print verbose output."
  print -- "     --version  Print the program version."
  print
  print -- "See the man page for more information."
  print
  print -- "Report bugs to <https://github.com/emcrisostomo/macports-utils/issues>."
  print -- "${PROGNAME} home page: <https://github.com/emcrisostomo/macports-utils>."
}

parse_opts()
{
  while getopts ":" opt
  do
    case $opt in
      \?)
        >&2 print -- Invalid option -${OPTARG}.
        exit 1
        ;;
    esac
  done

  ARGS_PROCESSED=$((OPTIND - 1))
}

function set_missing_default_variables()
{
  : ${GITHUB_AUTHOR=}
  : ${PORT_NAME=}
  : ${PORT_VERSION=}
  : ${PORT_SHORT_DESCRIPTION=Add short description here}
  : ${PORT_DESCRIPTION=Add description here}
  : ${GITHUB_REPO_URL=}
  : ${CHECKSUM_MD5=md5_checksum}
  : ${CHECKSUM_RMD160=rmd160_checksum}
  : ${CHECKSUM_SHA256=sha256_checksum}
  : ${CHECKSUM_SIZE=size_checksum}
}

function calculate_checksums()
{
  local distfile=$1

  CHECKSUM_MD5=$(openssl md5 $1 | awk '{ print $NF; }')
  CHECKSUM_RMD160=$(openssl rmd160 $1 | awk '{ print $NF; }')
  CHECKSUM_SHA256=$(openssl sha256 $1 | awk '{ print $NF; }')
  CHECKSUM_SIZE=$(LC_ALL=C ls -l ${1} | awk '{ print $5; }')
}

function download_archive()
{
  local download_url=$1
  local download_file_name=${download_url:t}

  if (( ${USE_CACHED_FILES} == 0 )) || [[ ! -f ${download_file_name} ]]
  then
    if ! curl -s --location ${1} --output ${download_file_name}
    then
      return
    fi
  fi

  calculate_checksums ${download_file_name}
}

function find_url_type()
{
  local url=$1

  [[ ${url} == "https://github.com/"* ]] && print github && return;
  [[ ${url} == "https://pypi.python.org/packages/"* ]] && print pypi && return
  [[ ${url} == "https://files.pythonhosted.org/packages/source/"* ]] && print pyhosted && return

  print unknown
  return
}

# Builds a GitHub Repository API URL
# Parameters:
#   - repository owner
#   - repository name
function get_gh_repo_api_url()
{
  (( $# == 2 )) ||
    {
      >&2 print -- "Invalid arguments: $*"
      return 1
    }

  # https://api.github.com/repos/emcrisostomo/fswatch
  printf "https://api.github.com/repos/%s/%s" $1 $2
}

function get_latest_github_version()
{
  local GH_LATEST_VER_API_RESPONSE=$(curl \
                                       -s \
                                       https://api.github.com/repos/${GITHUB_AUTHOR}/${PORT_NAME}/releases/latest)
  local -i GH_NUMBER_OF_ASSETS=$(print -r -- ${GH_LATEST_VER_API_RESPONSE} | jq '.assets | length')

  if (( ${GH_NUMBER_OF_ASSETS} != 1 ))
  then
    >&2 print "Unsupported: the latest release has multiple assets."
    exit 5
  fi

  PORT_VERSION=$(print -r -- ${GH_LATEST_VER_API_RESPONSE} | jq -r '.tag_name')
  DOWNLOAD_URL=$(print -r -- ${GH_LATEST_VER_API_RESPONSE} | jq -r '.assets[0].browser_download_url')
}

function get_github_description
{
  (( $# == 2 )) ||
    {
      >&2 print "Invalid number of arguments: $#"
      return 1
    }

  local gh_author=$1
  local gh_port_name=$2
  local gh_repo_url=$(get_gh_repo_api_url ${gh_author} ${gh_port_name})
  local description=$(curl \
                        -s \
                        ${gh_repo_url} | \
                        jq -r '.description')

  local folded_description=$(print -r -- ${description} | fold -w 64 -s)
  local -a arr_description
  arr_description+=( "" )
  arr_description+=( ${(f)folded_description} )

  for i in ${arr_description}
  do
    print -- :: ${i}
  done

  # Extract the short description before adding the final backslash
  PORT_SHORT_DESCRIPTION=${arr_description[2]}

  for i in $(seq 1 $((${#arr_description} - 1)))
  do
    arr_description[i]="${arr_description[i]} \\\\\n"
  done

  PORT_DESCRIPTION=${arr_description}
}

function match_github_release_url()
{
  if [[ ! ${DISTFILE_URL} =~ ${GITHUB_RELEASE_TARBALL_REGEX} ]]
  then
    return 1
  fi

  GITHUB_AUTHOR=${match[1]}
  PORT_NAME=${match[2]}
  PORT_VERSION=${match[3]}
  GITHUB_REPO_URL=https://github.com/${GITHUB_AUTHOR}/${PORT_NAME}
  DOWNLOAD_URL=${DISTFILE_URL}

  get_github_description ${GITHUB_AUTHOR} ${PORT_NAME}
}

function match_github_repo_url()
{
  if [[ ! ${DISTFILE_URL} =~ ${GITHUB_PROJECT_REGEX} ]]
  then
    return 1
  fi

  GITHUB_AUTHOR=${match[1]}
  PORT_NAME=${match[2]}
  GITHUB_REPO_URL=${DISTFILE_URL}

  get_latest_github_version ${GITHUB_REPO_URL}
  get_github_description ${GITHUB_AUTHOR} ${PORT_NAME}
}

function parse_github_url()
{
  match_github_release_url || match_github_repo_url ||
    {
      >&2 print "The URL doesn't match a GitHub release archive."
      exit 1
    }
}

function process_github_url()
{
  parse_github_url ${DISTFILE_URL}
  download_archive ${DOWNLOAD_URL}
  set_missing_default_variables

  GITHUB_TEMPLATE=$(< ${TEMPLATES_DIR}/github.in)
  print -- ${(e)GITHUB_TEMPLATE}
}

function parse_pyhosted_url()
{
  if [[ ! $1 =~ ${PYHOSTED_REGEX} ]]
  then
    >&2 print "The URL doesn't match a pythonhosted.org package."
    exit 1
  fi

  local BUCKET_LETTER=${match[1]}
  PYPI_NAME=${match[2]}
  local DISTFILE_TAIL=${match[3]}

  [[ ${BUCKET_LETTER} == ${PYPI_NAME[1]} ]] ||
    {
      >&2 print "The URL doesn't match a pythonhosted.org package."
      exit 2
    }

  [[ ${DISTFILE_TAIL} == ${PYPI_NAME}-* ]] ||
    {
      >&2 print "The URL doesn't match a pythonhosted.org package."
      exit 3
    }

  [[ ${DISTFILE_TAIL} =~ ${PYPI_NAME}-(.*)\\.tar\\.gz ]] ||
    {
      >&2 print "Cannot extract version from pythonhosted.org package URL."
      exit 4
    }

  PORT_NAME=py-${PYPI_NAME}
  PORT_VERSION=${match[1]}
}

function process_pyhosted_url()
{
  local url=$1

  parse_pyhosted_url ${url}
  download_archive ${DISTFILE_URL}
  set_missing_default_variables

  local PYTHON_TEMPLATE=$(< ${TEMPLATES_DIR}/python.in)
  print -- ${(e)PYTHON_TEMPLATE}
}

# main
# syntax:
#
# GitHub release:
# --url https://github.com/emcrisostomo/semver-utils/releases/download/1.1.3/semver-utils-1.1.3.tar.gz
# PyPI:
# --url https://pypi.python.org/packages/d6/90/2c2998b06f3feef03ef4459c459cca5b8a788d246e8d8bf23f3c137fe2e4/boto3-1.6.6.tar.gz#md5=e94ac04ef5aea425cc9ab710c59fb1c3
# --url https://files.pythonhosted.org/packages/source/b/boto3/boto3-1.6.3.tar.gz
#
zparseopts -D \
           h=help_flag    -help=help_flag         \
                          -no-cache=no_cache_flag \
           u:=url_flag    -url:=url_flag          \
           v=verbose_flag -verbose=verbose_flag   \
                          -version=version_flag

if (( ${+help_flag[1]} > 0 ))
then
  print_usage
  exit 0
fi

if (( ${+version_flag[1]} > 0 ))
then
  print_version
  exit 0
fi

(( ${#no_cache_flag} > 0 ))   && USE_CACHED_FILES=0
(( ${#url_flag} > 0 ))        && DISTFILE_URL=${url_flag[2]}
(( ${+verbose_flag[1]} > 0 )) && VERBOSE_PRINT=print

parse_opts $* && shift ${ARGS_PROCESSED}

(( $# == 0 )) ||
  {
    >&2 print "No arguments allowed."
    exit 2
  }

[[ -n ${DISTFILE_URL} ]] ||
  {
    echo ${DISTFILE_URL}
    >&2 print "Missing distfile URL."
    exit 2
  }

process_url=process_$(find_url_type ${DISTFILE_URL})_url

if ! whence ${process_url} > /dev/null
then
  >&2 print "Unprocessable URL."
  exit 2
fi

${process_url} ${DISTFILE_URL}

# Local variables:
# coding: utf-8
# mode: sh
# eval: (sh-set-shell "zsh")
# tab-width: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# sh-indentation: 2
# End:
